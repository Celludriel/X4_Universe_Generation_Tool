//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.01 at 12:27:02 AM CEST 
//


package be.celludriel.universegenerator.model.xml.libraries;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for roomtypelookup.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="roomtypelookup"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="bar"/&gt;
 *     &lt;enumeration value="corridor"/&gt;
 *     &lt;enumeration value="factionrep"/&gt;
 *     &lt;enumeration value="infrastructure"/&gt;
 *     &lt;enumeration value="manager"/&gt;
 *     &lt;enumeration value="office"/&gt;
 *     &lt;enumeration value="prison"/&gt;
 *     &lt;enumeration value="security"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "roomtypelookup")
@XmlEnum
public enum Roomtypelookup {

    @XmlEnumValue("bar")
    BAR("bar"),
    @XmlEnumValue("corridor")
    CORRIDOR("corridor"),
    @XmlEnumValue("factionrep")
    FACTIONREP("factionrep"),
    @XmlEnumValue("infrastructure")
    INFRASTRUCTURE("infrastructure"),
    @XmlEnumValue("manager")
    MANAGER("manager"),
    @XmlEnumValue("office")
    OFFICE("office"),
    @XmlEnumValue("prison")
    PRISON("prison"),
    @XmlEnumValue("security")
    SECURITY("security");
    private final String value;

    Roomtypelookup(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Roomtypelookup fromValue(String v) {
        for (Roomtypelookup c: Roomtypelookup.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
